requirements.txt:
python-multipart==0.0.6
fastapi==0.95.0
uvicorn==0.21.1
psycopg2-binary==2.9.6
requests==2.28.2  # if you still use 'requests' in llm.py


wait-for-db.sh:
#!/bin/bash
set -e

host="$1"
shift
cmd="$@"

until pg_isready -h "$host" -U postgres; do
  >&2 echo "Postgres is unavailable - sleeping"
  sleep 1
done

>&2 echo "Postgres is up - executing command"
exec $cmd


Dockerfile:
FROM python:3.10-slim

# Install required system dependencies
RUN apt-get update && apt-get install -y git ffmpeg postgresql-client

WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --upgrade pip && pip install -r requirements.txt

# Clone the markitdown repository and install it
RUN git clone https://github.com/microsoft/markitdown.git /tmp/markitdown
RUN pip install -e /tmp/markitdown/packages/markitdown[all]

# Copy the wait-for-db script
COPY wait-for-db.sh /app/wait-for-db.sh
RUN chmod +x /app/wait-for-db.sh

# Copy the entire app folder
COPY . .

# Expose FastAPIâ€™s port
EXPOSE 5000

# Use wait-for-db.sh to ensure the database is up, then start Uvicorn
CMD ["/app/wait-for-db.sh", "db", "uvicorn", "app.main:app", "--host=0.0.0.0", "--port=5000"]


docker-compose.yml:
version: '3'
services:
  web:
    build: .
    container_name: intel-man
    ports:
      - "5001:5000"
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=postgresql://postgres:your_password@db:5432/your_db_name
    depends_on:
      - db

  db:
    image: postgres:15.3
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_db_name
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d

volumes:
  pgdata:


/app/config.py:
import os

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
STORAGE_FOLDER = os.path.join(BASE_DIR, 'storage')
DATABASE_URL = os.environ.get('DATABASE_URL', f"sqlite:///{os.path.join(BASE_DIR, 'app.db')}")


/app/main.py:
# app/main.py
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

app = FastAPI(title="My FastAPI App")

# Include your API routers with specific prefixes.
from .routers.browse import router as browse_router
from .routers.upload import router as upload_router
from .routers.llm import router as llm_router
from .routers.dbexplorer import router as dbexplorer_router

app.include_router(browse_router, prefix="/api/browse")
app.include_router(upload_router, prefix="/api/upload")
app.include_router(llm_router, prefix="/api/llm")
app.include_router(dbexplorer_router, prefix="/api/dbexplorer")




# Mount the static folder at the root.
# The html=True flag makes index.html the default file.
app.mount("/", StaticFiles(directory="app/static", html=True), name="static")


/app/routers/browse.py:
# app/routers/browse.py
import os
from fastapi import APIRouter, HTTPException
from fastapi.responses import FileResponse, JSONResponse
from ..config import STORAGE_FOLDER

router = APIRouter(tags=["browse"])

@router.get("/")
def get_files():
    if not os.path.exists(STORAGE_FOLDER):
        return JSONResponse(content={"files": []})
    files = [
        f for f in os.listdir(STORAGE_FOLDER)
        if os.path.isfile(os.path.join(STORAGE_FOLDER, f))
    ]
    return {"files": files}

@router.get("/download/{filename}")
def download_file(filename: str):
    file_path = os.path.join(STORAGE_FOLDER, filename)
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="File not found")
    return FileResponse(file_path, media_type="application/octet-stream", filename=filename)


/app/routers/upload.py:
# app/routers/upload.py
import os
from fastapi import APIRouter, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse
from ..config import STORAGE_FOLDER
from ..services.markitdown_service import convert_file_to_markdown
from ..services.file_database_service import insert_file_record, update_file_record

router = APIRouter(tags=["upload"])

@router.post("/")
async def process_upload(file: UploadFile = File(...)):
    if not file or not file.filename:
        raise HTTPException(status_code=400, detail="No file uploaded")

    try:
        original_filename = file.filename
        _, ext = os.path.splitext(original_filename)

        create_user = "test_user"  # Or get from token/headers in real usage
        status = "uploaded"

        # Insert a new record to get the file_id
        file_id = insert_file_record(create_user, original_filename, status)
        new_filename = f"{file_id}{ext}"
        new_file_path = os.path.join(STORAGE_FOLDER, new_filename)

        # Ensure storage folder exists
        os.makedirs(STORAGE_FOLDER, exist_ok=True)

        # Save the file to disk
        with open(new_file_path, "wb") as f:
            content = await file.read()
            f.write(content)

        # Convert to markdown
        markdown_content = convert_file_to_markdown(new_file_path, enable_plugins=False)

        # Update the DB record
        update_file_record(file_id, new_filename, markdown_content)

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error processing upload: {e}")

    return {
        "record_id": file_id,
        "allocated_filename": new_filename,
        "markdown": markdown_content
    }


/app/routers/llm.py:
# app/routers/llm.py
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
import requests

router = APIRouter(tags=["llm"])

class LLMRequest(BaseModel):
    prompt: str = None
    messages: list = None

@router.post("/")
def query_llm(data: LLMRequest):
    if not data.prompt and not data.messages:
        raise HTTPException(status_code=400, detail="No prompt or messages provided")

    # Build messages array
    if data.messages:
        messages = data.messages
    else:
        messages = [{"role": "user", "content": data.prompt}]

    api_url = ""  # Your real LLM endpoint
    headers = {
        "Content-Type": "application/json",
        "api-key": ""
    }
    payload = {
        "messages": messages,
        "max_completion_tokens": 5000,  # Or whatever you need
        "reasoning_effort": "high"
    }

    try:
        response = requests.post(api_url, json=payload, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        raise HTTPException(status_code=500, detail=f"LLM request failed: {str(e)}")


/app/routers/dbexplorer.py:
from fastapi import APIRouter, HTTPException
import psycopg2
from psycopg2.extras import RealDictCursor
from psycopg2 import sql
from ..config import DATABASE_URL

router = APIRouter(tags=["dbexplorer"])

@router.get("/tables")
def list_tables():
    """
    Return a list of table names from the public schema.
    """
    conn = None
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor(cursor_factory=RealDictCursor)
        cur.execute(
            """
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_type = 'BASE TABLE';
            """
        )
        tables = [row["table_name"] for row in cur.fetchall()]
        cur.close()
        return {"tables": tables}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        if conn:
            conn.close()


@router.get("/table/{table_name}")
def get_table_snapshot(table_name: str):
    """
    Returns a snapshot of a given table. The response contains:
      - "columns": list of column names,
      - "records": up to 10 rows of data from the table.
    """
    conn = None
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor(cursor_factory=RealDictCursor)

        # Validate that the table exists in the public schema.
        cur.execute(
            """
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = %s;
            """,
            (table_name,),
        )
        if not cur.fetchone():
            raise HTTPException(status_code=404, detail="Table not found")

        # Build a safe query using psycopg2.sql to avoid SQL injection.
        query = sql.SQL("SELECT * FROM {} LIMIT 10;").format(sql.Identifier(table_name))
        cur.execute(query)
        records = cur.fetchall()

        # Extract column names from the cursor description.
        columns = [desc.name for desc in cur.description] if cur.description else []
        cur.close()

        return {"columns": columns, "records": records}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        if conn:
            conn.close()


/app/db-init/init.sql:
CREATE TABLE IF NOT EXISTS intel_L100_files (
  file_id SERIAL PRIMARY KEY,
  create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  create_user VARCHAR(50) NOT NULL,
  delete_date TIMESTAMP,
  delete_user VARCHAR(50),
  uploaded_file_name VARCHAR(255) NOT NULL,
  file_name VARCHAR(255) NOT NULL,
  file_description TEXT,
  file_series INTEGER, -- This is a foreign key; update the reference if you have a series table
  fingerprint VARCHAR(255),
  description TEXT,
  metad_create_date TIMESTAMP,
  metad_edit_date TIMESTAMP,
  markdown_extract TEXT,
  status VARCHAR(50)
  -- Uncomment and adjust the next line if you have a referenced table for file_series:
  --, FOREIGN KEY (file_series) REFERENCES file_series(file_series_id)
);




/app/static/index.html:
<!-- app/static/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Home - My App</title>
  <link rel="icon" type="image/x-icon" href="images/favicon.ico">
  <link href="css/bootstrap.min.css" rel="stylesheet">
  <script src="js/vue.global.js"></script>
</head>
<body>
  <!-- A simple navbar with links to other pages -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
      <a class="navbar-brand" href="index.html">My App</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" href="index.html">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="upload.html">Upload</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="events.html">Events</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="browse.html">Files</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="dbexplorer.html">Database Explorer</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="llm.html">Chat with LLM</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container mt-5" id="homeApp">
    <h1>Welcome to My App</h1>
    <p>This is the home page served by FastAPI static hosting.</p>
  </div>

  <script>
    const { createApp } = Vue;
    createApp({}).mount('#homeApp');
  </script>
  <script src="js/bootstrap.bundle.min.js"></script>
</body>
</html>


/app/static/browse.html:
<!-- app/static/browse.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Browse Files - My App</title>
  <link rel="icon" type="image/x-icon" href="images/favicon.ico">
  <link href="css/bootstrap.min.css" rel="stylesheet">
  <script src="js/vue.global.js"></script>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
      <a class="navbar-brand" href="index.html">My App</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" href="index.html">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="upload.html">Upload</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="events.html">Events</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="browse.html">Files</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="dbexplorer.html">Database Explorer</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="llm.html">Chat with LLM</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container mt-5" id="browseApp">
    <h1>Uploaded Files</h1>
    <ul class="list-group">
      <li class="list-group-item" v-for="file in files" :key="file">
        <a :href="`/api/browse/download/${file}`">{{ file }}</a>
      </li>
    </ul>
    <p v-if="files.length === 0">No files uploaded.</p>
  </div>

  <script>
    const { createApp } = Vue;
    createApp({
      data() {
        return {
          files: []
        }
      },
      mounted() {
        fetch('/api/browse/')
          .then(response => response.json())
          .then(data => {
            this.files = data.files;
          })
          .catch(error => {
            console.error('Error fetching files:', error);
          });
      }
    }).mount('#browseApp');
  </script>
  <script src="js/bootstrap.bundle.min.js"></script>
</body>
</html>


/app/static/menu.html:
<!-- /app/templates/menu.html -->
<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <div class="container-fluid">
    <a class="navbar-brand" href="{{ url_for('pages.home') }}">My App</a>
    <div class="collapse navbar-collapse">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('pages.home') }}">Home</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/upload.html">Upload</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/events.html">Events</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/browse.html">Files</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('dbexplorer.explorer') }}">Database Explorer</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="llm.html">Chat with LLM</a>
        </li>
      </ul>
      <!-- Add a Logout link -->
      <ul class="navbar-nav">
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('login.logout') }}">Logout</a>
        </li>
      </ul>
    </div>
  </div>
</nav>


/app/static/login.html:
<!-- app/static/login.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Login - My App</title>
  <link rel="icon" type="image/x-icon" href="images/favicon.ico">
  <link href="css/bootstrap.min.css" rel="stylesheet">
  <script src="js/vue.global.js"></script>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
      <a class="navbar-brand" href="index.html">My App</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" href="index.html">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="upload.html">Upload</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="events.html">Events</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="browse.html">Files</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="dbexplorer.html">Database Explorer</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="llm.html">Chat with LLM</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container mt-5" id="loginApp">
    <h2>Login</h2>
    <div class="alert alert-danger" v-if="error">{{ error }}</div>
    <div class="mb-3">
      <label for="password" class="form-label">Password</label>
      <input type="password" class="form-control" id="password" v-model="password">
    </div>
    <button class="btn btn-primary" @click="attemptLogin">Login</button>
  </div>

  <script>
    const { createApp } = Vue;
    createApp({
      data() {
        return {
          password: '',
          error: ''
        }
      },
      methods: {
        attemptLogin() {
          // In a real-world FastAPI app, you'd do an API call:
          // fetch('/api/auth/login', { ... })
          if (this.password === 'dlpeye') {
            window.location.href = 'index.html';
          } else {
            this.error = 'Incorrect password. Please try again.';
          }
        }
      }
    }).mount('#loginApp');
  </script>
  <script src="js/bootstrap.bundle.min.js"></script>
</body>
</html>


/app/static/dbexplorer.html:
<!-- app/static/dbexplorer.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Database Explorer - My App</title>
  <link rel="icon" type="image/x-icon" href="images/favicon.ico">
  <link href="css/bootstrap.min.css" rel="stylesheet">
  <script src="js/vue.global.js"></script>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
      <a class="navbar-brand" href="index.html">My App</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" href="index.html">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="upload.html">Upload</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="events.html">Events</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="browse.html">Files</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="dbexplorer.html">Database Explorer</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="llm.html">Chat with LLM</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container mt-5" id="dbExplorerApp">
    <h1>Database Explorer</h1>
    
    <!-- Button to refresh table list -->
    <button class="btn btn-secondary mb-3" @click="fetchTables">Refresh Tables</button>
    
    <h2>Tables</h2>
    <ul class="list-group mb-4">
      <li 
        class="list-group-item list-group-item-action" 
        v-for="(table, index) in tables" 
        :key="index"
        @click="fetchTableSnapshot(table)"
        style="cursor: pointer;"
      >
        {{ table }}
      </li>
      <li class="list-group-item" v-if="tables.length === 0">
        No tables found.
      </li>
    </ul>

    <!-- Table Snapshot Section -->
    <div v-if="selectedTable">
      <h2>Snapshot of Table: <em>{{ selectedTable }}</em></h2>
      <table class="table table-striped" v-if="tableSnapshot.records.length > 0">
        <thead>
          <tr>
            <th v-for="col in tableSnapshot.columns" :key="col">{{ col }}</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="(row, index) in tableSnapshot.records" :key="index">
            <td v-for="col in tableSnapshot.columns" :key="col">{{ row[col] }}</td>
          </tr>
        </tbody>
      </table>
      <div v-else>
        <p>No records found in this table.</p>
      </div>
    </div>

    <!-- Error message -->
    <div class="alert alert-danger" v-if="error">{{ error }}</div>
  </div>

  <script>
    const { createApp } = Vue;
    createApp({
      data() {
        return {
          tables: [],
          selectedTable: '',
          tableSnapshot: {
            columns: [],
            records: []
          },
          error: ''
        }
      },
      methods: {
        fetchTables() {
          this.error = '';
          this.tables = [];
          // Fetch the list of tables from the new endpoint
          fetch('/api/dbexplorer/tables')
            .then(resp => {
              if (!resp.ok) {
                throw new Error("Failed to fetch tables.");
              }
              return resp.json();
            })
            .then(data => {
              this.tables = data.tables || [];
            })
            .catch(err => {
              console.error(err);
              this.error = 'Error fetching table list.';
            });
        },
        fetchTableSnapshot(table) {
          this.error = '';
          this.selectedTable = table;
          this.tableSnapshot = { columns: [], records: [] };
          // Fetch the snapshot for the selected table
          fetch(`/api/dbexplorer/table/${table}`)
            .then(resp => {
              if (!resp.ok) {
                throw new Error("Failed to fetch table snapshot.");
              }
              return resp.json();
            })
            .then(data => {
              this.tableSnapshot = data;
            })
            .catch(err => {
              console.error(err);
              this.error = 'Error fetching table snapshot.';
            });
        }
      },
      mounted() {
        this.fetchTables();
      }
    }).mount('#dbExplorerApp');
  </script>
  <script src="js/bootstrap.bundle.min.js"></script>
</body>
</html>


/app/static/llm.html:
<!-- app/static/llm.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Chat with LLM - My App</title>
  <link rel="icon" type="image/x-icon" href="images/favicon.ico">
  <link href="css/bootstrap.min.css" rel="stylesheet">
  <script src="js/vue.global.js"></script>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
      <a class="navbar-brand" href="index.html">My App</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" href="index.html">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="upload.html">Upload</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="events.html">Events</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="browse.html">Files</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="dbexplorer.html">Database Explorer</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="llm.html">Chat with LLM</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container mt-5" id="chatApp">
    <h1>Chat with LLM</h1>
    <div id="conversation" style="max-height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
      <div v-for="(message, index) in messages" :key="index" :class="{'text-end': message.role === 'assistant'}">
        <p><strong>{{ message.role }}:</strong> {{ message.content }}</p>
      </div>
    </div>

    <div class="mt-3">
      <input type="text" v-model="newPrompt" class="form-control" placeholder="Type your message">
    </div>
    <div class="mt-2">
      <button class="btn btn-primary" @click="sendMessage" :disabled="!newPrompt">Send</button>
    </div>

    <div class="mt-3" v-if="error">
      <div class="alert alert-danger" role="alert">{{ error }}</div>
    </div>
  </div>

  <script>
    const { createApp } = Vue;
    createApp({
      data() {
        return {
          messages: [],
          newPrompt: '',
          error: ''
        }
      },
      methods: {
        async sendMessage() {
          // add user prompt to conversation
          this.messages.push({ role: 'user', content: this.newPrompt });
          const payload = { messages: this.messages };
          try {
            const response = await fetch('/api/llm/', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });
            const data = await response.json();
            if (response.ok) {
              // If your API returns something like data.choices[0].message:
              if (data.choices && data.choices.length > 0) {
                const assistantMsg = data.choices[0].message;
                this.messages.push(assistantMsg);
              } else {
                this.error = 'No response received from LLM.';
              }
            } else {
              this.error = data.error || 'LLM request failed.';
            }
          } catch (err) {
            console.error('LLM request error:', err);
            this.error = 'An error occurred while sending your message.';
          }
          this.newPrompt = '';
        }
      }
    }).mount('#chatApp');
  </script>
  <script src="js/bootstrap.bundle.min.js"></script>
</body>
</html>


/app/static/events.html:
<!-- app/static/events.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Events - My App</title>
  <link rel="icon" type="image/x-icon" href="images/favicon.ico">
  <link href="css/bootstrap.min.css" rel="stylesheet">
  <script src="js/vue.global.js"></script>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
      <a class="navbar-brand" href="index.html">My App</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" href="index.html">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="upload.html">Upload</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="events.html">Events</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="browse.html">Files</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="dbexplorer.html">Database Explorer</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="llm.html">Chat with LLM</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container mt-5" id="eventBrowser">
    <h1>Event History Browser</h1>
    <!-- Add your event-browsing UI or logic here -->
  </div>

  <script>
    const { createApp } = Vue;
    createApp({}).mount('#eventBrowser');
  </script>
  <script src="js/bootstrap.bundle.min.js"></script>
</body>
</html>


/app/static/upload.html:
<!-- app/static/upload.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Upload - My App</title>
  <link rel="icon" type="image/x-icon" href="images/favicon.ico">
  <link href="css/bootstrap.min.css" rel="stylesheet">
  <script src="js/vue.global.js"></script>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
      <a class="navbar-brand" href="index.html">My App</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" href="index.html">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="upload.html">Upload</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="events.html">Events</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="browse.html">Files</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="dbexplorer.html">Database Explorer</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="llm.html">Chat with LLM</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container mt-5" id="uploadApp">
    <h1>Upload Document for Conversion</h1>
    <div class="mb-3">
      <input type="file" class="form-control" @change="onFileChange">
    </div>
    <button class="btn btn-primary" @click="uploadFile" :disabled="!file">Upload</button>
    <div class="mt-4" v-if="result">
      <h3>Converted Markdown</h3>
      <pre>{{ result }}</pre>
    </div>
    <div class="mt-4" v-if="error">
      <div class="alert alert-danger" role="alert">{{ error }}</div>
    </div>
  </div>

  <script>
    const { createApp } = Vue;
    createApp({
      data() {
        return {
          file: null,
          result: '',
          error: ''
        }
      },
      methods: {
        onFileChange(event) {
          this.file = event.target.files[0];
        },
        async uploadFile() {
          if (!this.file) {
            this.error = 'Please select a file.';
            return;
          }
          this.error = '';
          const formData = new FormData();
          formData.append('file', this.file);
          try {
            const response = await fetch('/api/upload/', {
              method: 'POST',
              body: formData
            });
            const data = await response.json();
            if (response.ok) {
              // 'markdown' is returned by the API
              this.result = data.markdown;
            } else {
              this.error = data.error || 'Upload failed';
            }
          } catch (err) {
            console.error('Upload error:', err);
            this.error = 'An error occurred while uploading.';
          }
        }
      }
    }).mount('#uploadApp');
  </script>
  <script src="js/bootstrap.bundle.min.js"></script>
</body>
</html>


/app/static/css/bootstrap.min.css:
[Library file content skipped]

/app/static/images/favicon.ico:
Error reading file: 'utf-8' codec can't decode byte 0x96 in position 50: invalid start byte

/app/static/js/bootstrap.bundle.min.js:
[Library file content skipped]

/app/static/js/vue.global.js:
[Library file content skipped]

/app/services/file_storage_service.py:
# /app/services/file_storage_service.py
import os
import uuid
from werkzeug.utils import secure_filename
from config import STORAGE_FOLDER

def save_file(file):
    """
    Saves the uploaded file to the designated storage folder.
    """
    if not os.path.exists(STORAGE_FOLDER):
        os.makedirs(STORAGE_FOLDER)

    filename = secure_filename(file.filename)
    unique_name = f"{uuid.uuid4().hex}_{filename}"
    file_path = os.path.join(STORAGE_FOLDER, unique_name)
    file.save(file_path)
    return file_path


/app/services/markitdown_service.py:
# app/services/markitdown_service.py
from markitdown import MarkItDown

def convert_file_to_markdown(file_path, enable_plugins=False):
    md = MarkItDown(enable_plugins=enable_plugins)
    result = md.convert(file_path)
    return result.text_content


/app/services/file_database_service.py:
# app/services/file_database_service.py
import psycopg2
from ..config import DATABASE_URL

def get_connection():
    return psycopg2.connect(DATABASE_URL)

def insert_file_record(create_user, uploaded_file_name, status):
    conn = get_connection()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO intel_L100_files (create_user, uploaded_file_name, file_name, status)
                VALUES (%s, %s, %s, %s)
                RETURNING file_id;
            """, (create_user, uploaded_file_name, "placeholder", status))
            file_id = cur.fetchone()[0]
        conn.commit()
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        conn.close()
    return file_id

def update_file_record(file_id, file_name, markdown_extract):
    conn = get_connection()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE intel_L100_files
                SET file_name = %s,
                    markdown_extract = %s,
                    metad_create_date = CURRENT_TIMESTAMP,
                    metad_edit_date = CURRENT_TIMESTAMP
                WHERE file_id = %s;
            """, (file_name, markdown_extract, file_id))
        conn.commit()
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        conn.close()


